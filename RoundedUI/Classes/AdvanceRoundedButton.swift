//
//  AdvanceRoundedButton.swift
//  RoundedUI
//
//  Created by Hien Pham on 6/20/19.
//

import UIKit

/**
 Advance round button, which allows for round or not round specific corners.
 */
@IBDesignable
open class AdvanceRoundedButton: RoundedButton, AdvanceRoundedCorners {

// sourcery:inline:auto:AdvanceRoundedButton.Template
    // Note: The block code here is auto generated by Sourcery (https://github.com/krzysztofzablocki/Sourcery)
    /**
     Round top left corner of the view. If `true` then rounded, else not rounded.
     */
    @IBInspectable open var roundTopLeft: Bool {
        get {
            return self.roundedLayer.roundTopLeft
        }
        set {
            self.roundedLayer.roundTopLeft = newValue
        }
    }
    /**
     Round top right corner of the view. If `true` then rounded, else not rounded.
     */
    @IBInspectable open var roundTopRight: Bool {
        get {
            return self.roundedLayer.roundTopRight
        }
        set {
            self.roundedLayer.roundTopRight = newValue
        }
    }
    /**
     Round bottom right corner of the view. If `true` then rounded, else not rounded.
     */
    @IBInspectable open var roundBottomLeft: Bool {
        get {
            return self.roundedLayer.roundBottomLeft
        }
        set {
            self.roundedLayer.roundBottomLeft = newValue
        }
    }
    /**
     Round bottom left corner of the view. If `true` then rounded, else not rounded.
     */
    @IBInspectable open var roundBottomRight: Bool {
        get {
            return self.roundedLayer.roundBottomRight
        }
        set {
            self.roundedLayer.roundBottomRight = newValue
        }
    }
    open override var cornerRadius: CGFloat {
        get {
            return self.roundedLayer.shapeCornerRadius
        }
        set {
            self.roundedLayer.shapeCornerRadius = newValue
        }
    }
    open override var borderColor: UIColor? {
        get {
            guard let color = self.roundedLayer.strokeLayer.strokeColor else {
                return nil
            }
            return UIColor(cgColor: color)
        }
        set {
            self.roundedLayer.strokeLayer.strokeColor = newValue?.cgColor
        }
    }
    open override var borderWidth: CGFloat {
        // Setting the lineWidth draws a line, where the actual path is exactly in the middle of the drawn line.
        // So we need to double the line width because half will be draw outside out of the frame
        // https://stackoverflow.com/questions/18006801/why-does-a-cashapelayers-stroke-extend-out-of-the-frame
        get {
            return self.roundedLayer.strokeLayer.lineWidth / 2
        }
        set {
            self.roundedLayer.strokeLayer.lineWidth = newValue * 2
        }
    }
    open override var backgroundColor: UIColor? {
        get {
            guard let color = self.roundedLayer.fillColor else {
                return nil
            }
            return UIColor(cgColor: color)
        }
        set {
            self.roundedLayer.fillColor = newValue?.cgColor
        }
    }
    override open class var layerClass : AnyClass {
        return RoundedShapeLayer.self
    }
    /**
     Convenient property to retrieve custom layer of this view. Only used for debugging and testing only.
     */
    open var roundedLayer: RoundedShapeLayer {
        return (self.layer as! RoundedShapeLayer)
    }
// sourcery:end
}
